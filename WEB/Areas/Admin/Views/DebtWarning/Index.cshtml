@model DebtWarningViewModel
@{
    WebContext db = new WebContext();
    var roles = Roles.GetRolesForUser();
    var userRoleIds = db.WebRoles.Where(x => roles.Contains(x.RoleName)).Select(y => y.RoleId);
    var roleWebModule = db.AccessWebModuleRoles.AsNoTracking().FirstOrDefault(x => userRoleIds.Contains(x.RoleId) && x.WebModule.URL == "/admin/DetailCommission");
    var checkEmployee = WEB.WebHelpers.UserInfoHelper.GetUserData().StationID.HasValue;
    var totalWeigh = ViewBag.totalWeigh;
    var totalCostPrice = ViewBag.totalCostPrice;
    DateTime now = DateTime.Now;
}
@{
    ViewBag.Title = "Cảnh báo nợ xấu";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutReport.cshtml";
}
<div class="flex">
    <div id="general-import">
        @using (Html.BeginForm("ExportExcel", "DebtWarning", FormMethod.Post, new { @id = "general", enctype = "multipart/form-data", @class = "form-horizontal fix" }))
        {
            if (checkEmployee)
            {
                @Html.HiddenFor(x => x.StationID)
            }
            @Html.HiddenFor(m => m.StartTime)
            @Html.HiddenFor(m => m.EndTime)
            <div class="row row-quanlyxe">
                <div class="block-row">
                    <div class="flex">
                        <div class="manage-car-search row-plan-drive">
                            <p class="text-description-report text-description-report-time">Thời gian chạy báo cáo:</p>
                            <form action="">
                                @Html.TextBoxFor(m => m.TimeString)
                            </form>
                        </div>
                        <div>
                            @if (checkEmployee)
                            {
                                @Html.HiddenFor(m => m.StationName, new { @class = "input-block-level none-edit", @readonly = "readonly" })
                            }
                            else
                            {
                                <p class="text-description-report">Cửa hàng:</p>
                                @(Html.Kendo().ComboBoxFor(m => m.StationID)
                            .DataTextField("StationDisplayName")
                            .DataValueField("ID")
                            .Placeholder("Chọn cửa hàng ...")
                            .Suggest(true)
                            .Filter("contains")
                            .Name("StationID")
                            .HtmlAttributes(new { id = "ComboboxStation" })
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("GetStation", "Station");
                                })
                                .ServerFiltering(true);
                            })
                            .Events(e => e.DataBound("onDataBoundCombobox").Change("onChangeCombobox"))
                         )
                            }
                        </div>
                    </div>
                    <div class="flex">
                        <div>
                            <p class="text-hide-custom">Xuất</p>
                            <div class="btn-output btn-plan-drive detail-report-button" id="export">
                                <p class="text-14-500 padding-text-plan-drive detail-export">Chạy Báo Cáo</p>
                            </div>
                        </div>
                        <div>
                            <p class="text-hide-custom">Tải</p>
                            <div class="btn-download btn-plan-drive detail-report-button" id="download">
                                <input type="submit" value="Tải file excel" class="text-14-500 padding-text-plan-drive detail-download" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="container-fluid" id="dealDetail">
            <div class="row-fluid">
                <div class="span12">
                    <div class="box">
                        <div class="box-content nopadding">
                            <div class="report-title">
                                <h1>@ViewBag.title</h1>
                                <h2 id="report-time"></h2>
                                <h2 id="report-station"></h2>
                            </div>
                            <div id="detail-report"></div>
                            <script>
                                var rowselected;
                                var columns = [
                                    {
                                        field: "DateTime", title: "Ngày tháng", format: "{0: dd/MM/yyyy }", template: "#= kendo.toString(kendo.parseDate(data.DateTime), 'dd/MM/yyyy') #", width: "120px", filterable: {
                                            ui: function (element) {
                                                element.kendoDatePicker({
                                                    culture: 'vi-VN',
                                                    format: '{0: dd/MM/yyyy}'
                                                });
                                            }
                                        }
                                    },
                                    { field: "CustomerName", title: "Khách hàng", width: "150px" },
                                    { field: "Vehicle", title: "Phương tiện", width: "150px", footerTemplate: "Tổng" },
                                    { field: "Debt", title: "Nợ còn lại", template: "#= (data.Debt) ? kendo.format('{0:n2} đ', parseFloat(data.Debt)) : '' #", aggregates: ["sum"], footerTemplate: "#= (sum) ? kendo.format('{0:n0} đ', parseFloat(sum)) : '' #", width: "150px" },
                                    { field: "DebtDate", title: "Số ngày nợ", width: "150px" }]
                                function loaddata(model) {
                                    if ($("#detail-report").data("kendoGrid") != null) { $('#detail-report').html(''); delete $("#detail-report").data("kendoGrid"); }
                                    $("#detail-report").kendoGrid({
                                        dataSource: {
                                            transport: {
                                                read: {
                                                    url: "/admin/DebtWarning/DebtWarning_Read/",
                                                    dataType: "json",
                                                    data: model
                                                }
                                            },
                                            aggregate: [
                                                { field: "Debt", aggregate: "sum" },
                                                { field: "CustomerPayment", aggregate: "sum" },
                                            ],
                                            emptyMsg: 'This grid is empty',
                                            schema: {
                                                model: {
                                                    ID: "ID",
                                                    fields: {
                                                        DateTime: { type: "date" },
                                                        Debt: { type: "number" },
                                                        DebtDate: { type: "number" },
                                                    }
                                                }
                                            },
                                        },
                                        scrollable: true,
                                        columns: columns,
                                        filterable: true,
                                        dataBound: function (e) {
                                            var rows = e.sender.tbody.children();
                                            for (var j = 0; j < rows.length; j++) {
                                                var row = $(rows[j]);
                                                var dataItem = e.sender.dataItem(row);

                                                var debtDate = dataItem.get("DebtDate");

                                                if (debtDate >= 60) {
                                                    row.addClass("debtDateRed");
                                                }
                                                else if (45 <= debtDate && debtDate <= 59) {
                                                    row.addClass("debtDateYellow");
                                                }
                                            }
                                        },
                                        dataBinding: function () {
                                            rowselected = new Array();
                                        },
                                        change: function () {
                                            rowselected = [];
                                            var len = this.select().length;
                                            for (i = 0; i < len; i++) {
                                                rowselected.push(this.dataItem(this.select()[i]).ID);
                                            }
                                        }
                                    });
                                }
                            </script>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {


        $("#export").click(function () {
                var modelReport = {};
                function checkHasStation() {
                    if ('@checkEmployee' === 'True') {
                        if (!$("#StationID").valid()) {
                            return true;
                        }
                        else {
                            modelReport.StationID = $("#StationID").val();
                            return false;
                        }
                    }
                    else {
                        if (!$("#ComboboxStation").valid()) {
                            return true;
                        }
                        else {
                            modelReport.StationID = $("#ComboboxStation").data('kendoComboBox').value()
                            return false;
                        }
                    }
                }
                checkHasStation();
                modelReport.TimeString = $("#TimeString").val();
                $("#report-time").html($("#TimeString").val());
                if ('@checkEmployee' === 'True') {
                    $("#report-station").html("Cửa hàng: " + $("input[name='StationName']").val());
                    loaddata(modelReport);
                } else {
                   if (modelReport.StationID == null || modelReport.StationID == "") {
                       loaddata(modelReport);
                       $("#report-station").html("Cửa hàng: Tất cả");
                     } else {
                       loaddata(modelReport);
                       $("#report-station").html("Cửa hàng: " + $("#ComboboxStation").data('kendoComboBox').text());
                    };
                };
            });
            $("#download").click(function () {

            });
            //$(".datepicker").kendoDatePicker({
            //    format: "dd/MM/yyyy",
            //    timeFormat: "HH:mm",
            //    culture: "vi-VN",
            //    value: new Date(),
            //});


        });
    $(function () {
        $('input[name="TimeString"]').daterangepicker({
            opens: 'left',
            language: 'vi-VN',
            singleDatePicker: true,
            showDropdowns: true,
            maxDate: new Date(Date.now()),
            locale: {
                format: 'DD-MM-YYYY',
                separator: " Đến ",
                daysOfWeek: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
                monthNames: ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"],
                firstDay: 1,
                cancelLabel: "Hủy",
                applyLabel: "Chọn",
            },

        }, function (start, end, label) {
        });
    });
    //function styleWarning() {
    //    var grid = $("#detail-report").data("kendoGrid");
    //    console.log(grid);
    //    console.log(grid.dataSource.view().length);
    //    for (var i = 0; i < grid.dataSource.data().length; i++) {
    //        var item = grid.dataSource.data()[i];
    //        if (item.DebtDate >= 60) {
    //            console.log(item.Debt);
    //        }
    //    }
    //}
</script>
<style>
    input#TimeString {
        cursor: pointer;
        width: 260px;
        text-align: center;
        height: 42px !important;
    }

    .ui-datepicker-calendar {
        display: block;
    }

    #ui-datepicker-div {
        width: 256px;
    }

    .debtDateRed {
        background-color: #f95050;
        color: white !important;
    }

    .debtDateYellow {
        background-color: yellow;
    }

    #dealDetail tbody tr[class='debtDateRed'] td:last-child {
        color: white !important;
    }

    #dealDetail tbody tr[class='k-alt debtDateRed'] td:last-child {
        color: white !important;
    }
</style>

