@model IEnumerable<InvoiceDetailViewModel>
@{
    var userData = WEB.WebHelpers.UserInfoHelper.GetUserData();
    var checkEmployee = WEB.WebHelpers.UserInfoHelper.GetUserData().StationID.HasValue;
}

<div>
    <div class="title-importdetail">
        <h2>Chi tiết đơn bán hàng</h2>
    </div>

    <div id="editdetail"></div>
    <div id="windowdelete"></div>

    <script type="text/x-kendo-template" id="windowTemplate">
        <p> Xoá hàng hoá : <strong>#= ProductDisplayName #</strong> ? </p>
        <p> Xoá số lượng : <strong>#= SaleAmount #</strong> ? </p>
        <p> Xoá giá bán  : <strong>#= CostPrice #</strong> ? </p>
        <p> Xoá giá vốn  : <strong>#= SalePrice #</strong> ? </p>
        <p> Xoá giá niêm yết : <strong>#= ListPrice #</strong> ? </p>
        <p> Xoá chiết khấu : <strong>#= SupplierDiscount #</strong> ? </p>
        <p> Xoá cước vận chuyển : <strong>#= FreightCharge #</strong> ? </p>
        <p> Xoá Loại GD : <strong>#= InvoiceType #</strong> ? </p>
        <p> Xoá thành tiền : <strong>#= Money #</strong> ? </p>
        <p> Xoá Khách trả : <strong>#= CustomerPayment #</strong> ? </p>
        <button class="k-button" id="yesButton">Xác nhận xoá</button>
        <button class="k-button" id="noButton"> Huỷ</button>
    </script>

    <div id="windowNotice"></div>
    <script type="text/x-kendo-template" id="windowNoticeTemplate">
        <p> Hành động này sẽ thay đổi Số lượng, Giá vốn, Thành tiền trong chi tiết đơn bán hàng.</p>
        <button class="k-button" id="okButton">Không hiển thị lại</button>
        <button class="k-button" id="closeButton">Đóng</button>
    </script>

    <script>
        var selectedProductName = "";
        function callEditFunction(name, string) {
            var grid = $("#editdetail").data("kendoGrid");
            grid.bind("edit", function (e) {
                e.model.set(string + "DisplayName", name);
            });
        };
        function onDataBound() {
            var grid = $("#editdetail").data("kendoGrid");
            var stationID = $("#StationID").val() && $("#StationID").val() !== '' ? $("#StationID").val() : $("#ComboboxStation").data('kendoComboBox').value();
            var stationName = $("#StationName").val() && $("#StationName").val() !== '' ? $("#StationName").val() : $("#ComboboxStation").data('kendoComboBox').text();

            if (grid.dataSource.data().length === 0) {
                var newRow = { StationID: stationID, ProductDisplayName: "", StationDisplayName: stationName };
                grid.dataSource.add(newRow);
            } else {
                for (var i = 0; i < grid.dataSource.data().length; i++) {
                    var item = grid.dataSource.data()[i];
                    if (!item.StationID || item.StationID === '') {
                        item.set("StationID", stationID);
                        item.set("StationDisplayName", stationName);
                    }
                }
            }
        }
        var checkfirstload = true;
        function checkknumber(e) {
            //var numget = $(e).find("input").val();
            //var numset = numget.toLocaleString();
            //console.log(numset);
        };
        $("#Date").change(function () {
            var datamodel = {};
            datamodel.StationID = $("#ComboboxStation").data('kendoComboBox').value();
            var grid = $("#editdetail").data("kendoGrid");
            for (var i = 0; i < grid.dataSource.data().length; i++) {
                var item = grid.dataSource.data()[i];
                datamodel.Amount = item.SaleAmount;
                datamodel.Time = $("#Date").val();
                if (typeof (item.ProductID) === "object" && item.ProductID != null) {
                    datamodel.ProductID = item.ProductID.ID;
                }
                else if (typeof (item.ProductID) != "object" && item.ProductID != undefined && item.ProductID != "") {
                    datamodel.ProductID = item.ProductID;
                }
                if (datamodel.ProductID && datamodel.Time && datamodel.StationID && datamodel.ProductID != undefined && datamodel.ProductID != "") {
                    $.ajax({
                                            url: '@Url.Action("ProductChangeResult", "Invoice")',
                                            type: 'POST',
                        contentType: "application/json",
                        async: false,
                                            data: JSON.stringify(datamodel),
                                            success: function (result) {
                                                item.set("AvailableQuantity", result.QuantityLeft);
                                                item.set("SalePrice", result.Price);
                                                item.set("ListPrice", result.ListedPrice);
                                                item.set("CostPrice", result.CostPrice);
                                                item.set("FreightCharge", result.FreightCharges);
                                                var discount = 0;
                                                if (item.get("ListPrice") == undefined || item.get("CostPrice") == undefined) {Model
                                                    item.set("SupplierDiscount", discount);
                                                }
                                                else {
                                                    discount = item.get("ListPrice") / 1.1 - item.get("CostPrice");
                                                    item.set("SupplierDiscount", discount);
                                                }
                                                calculateTotal();
                                            }
                                        });
                }
                editdetail.refresh();
            }
        });

        $("#ComboboxStation").change(function () {
            if ($(this).val() === "") {
                return;
            }
            var datamodel = {};
            datamodel.StationID = $("#ComboboxStation").data('kendoComboBox').value();
            var grid = $("#editdetail").data("kendoGrid");
            for (var i = 0; i < grid.dataSource.data().length; i++) {
                var item = grid.dataSource.data()[i];
                datamodel.Amount = item.SaleAmount;
                datamodel.Time = $("#Date").val();
                if (typeof (item.ProductID) === "object" && item.ProductID != null) {
                    datamodel.ProductID = item.ProductID.ID;
                }
                else if (typeof (item.ProductID) != "object" && item.ProductID != undefined && item.ProductID != "") {
                    datamodel.ProductID = item.ProductID;
                }
                if (datamodel.ProductID && datamodel.Time && datamodel.StationID && datamodel.ProductID != undefined && datamodel.ProductID != "") {

                    $.ajax({
                        url: '@Url.Action("ProductChangeResult", "Invoice")',
                        type: 'POST',
                        contentType: "application/json",
                        async: false,
                        data: JSON.stringify(datamodel),
                        success: function (result) {
                            item.set("AvailableQuantity", result.QuantityLeft);
                            item.set("SalePrice", result.Price);
                            item.set("ListPrice", result.ListedPrice);
                            item.set("CostPrice", result.CostPrice);
                            item.set("FreightCharge", result.FreightCharges);
                            var discount = 0;
                            if (item.get("ListPrice") == undefined || item.get("ListPrice") == 0
                                || item.get("CostPrice") == undefined || item.get("CostPrice") == 0) {
                                item.set("SupplierDiscount", discount);
                            }
                            else {
                                discount = item.get("ListPrice") / 1.1 - item.get("CostPrice");
                                item.set("SupplierDiscount", discount);
                            }
                            calculateTotal();
                        }
                    });
                }
                editdetail.refresh();
            }
        });

        var isFirstLoad = true;
        var gridArr = {};
        function onDataBound(e) {
            var grid = $("#editdetail").data("kendoGrid");
            if (checkfirstload) {
                gridArr = JSON.stringify(e.sender.dataSource.data());
                checkfirstload = false;
            }

            if (grid.dataSource.data().length === 0) {
                var employer = checkemployer();
                if (employer.ProductID !== null) {
                    var newRow = {
                        ProductDisplayName: employer.ProductDisplayName,
                        InvoiceDisplayName: "Tiền mặt",
                        InvoiceType: "Tiền mặt",
                        FreightCharge: employer.FreightCharges,
                        AvailableQuantity: employer.QuantityLeft,
                        SalePrice: employer.Price,
                        ListPrice: employer.ListedPrice
                    };
                    grid.dataSource.add(newRow);
                } else {
                    var newRow = { ProductDisplayName: "", InvoiceDisplayName: "Tiền mặt", InvoiceType: "Tiền mặt", ProductID : ""};
                    grid.dataSource.add(newRow);
                }
            } else {
                for (var i = 0; i < grid.dataSource.data().length; i++) {
                    var item = grid.dataSource.data()[i];
                    if (item.ProductID === '' || item.ProductID === undefined) {
                        item.set("InvoiceType", "Tiền mặt");
                        item.set("InvoiceDisplayName", "Tiền mặt");
                    }
                }
                if (isFirstLoad) {
                    for (var i = 0; i < grid.dataSource.data().length; i++) {
                        var item = grid.dataSource.data()[i];
                        var modelavailable = {};
                        modelavailable.ProductID = item.ProductID;
                        modelavailable.Amount = item.SaleAmount;
                        if ($("#ComboboxStation").data('kendoComboBox')) {
                            modelavailable.StationID = $("#ComboboxStation").data('kendoComboBox').value();
                        } else {
                            modelavailable.StationID = $("#StationID").val();
                        }
                        if (modelavailable.ProductID && modelavailable.Amount && modelavailable.StationID) {
                            $.ajax({
                                url: '@Url.Action("CheckInventoryProduct", "ImportOrder")',
                                type: 'POST',
                                contentType: "application/json",
                                data: JSON.stringify(modelavailable),
                                async: false,
                                success: function (result) {
                                    item.set("AvailableQuantity", result);

                                }
                            });
                        }
                    }

                    isFirstLoad = false;
                }
            }
        }
        var rowselect;
        var windowTemplate = kendo.template($("#windowTemplate").html());
        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/admin/Invoice/InvoiceDetailRead/" + "@ViewBag.parentID",
                    dataType: "json"
                }
            },
            schema: {
                model: {
                    id: "ID",
                    fields: {
                        InvoiceType: { type: "string", validation: { required: { message: "Vui lòng chọn Kiểu GD" } } , value: "Tiền mặt" },
                        ProductID: { type: "int", validation: { required: { message: "Vui lòng nhập tên sản phẩm" } } },
                        AvailableQuantity: { type: "int"},
                        ProductName: { type: "string", validation: { required: { message: "Vui lòng nhập tên sản phẩm" } }  },
                        CostPrice: { type: "decimal", validation: { required: { message: "Vui lòng nhập giá vốn" } } },
                        SalePrice: { type: "decimal", validation: { required: { message: "Vui lòng nhập giá bán" } } },
                        ListPrice: { type: "decimal" },
                        SaleAmount: { type: "decimal", validation: { required: { message: "Vui lòng chọn nhập số lượng bán" } } },
                        CustomerPayment: { type: "decimal" },
                        SupplierDiscount: { type: "decimal" },
                        ProductDisplayName : { type: "string" },
                        InvoiceDisplayName : { type: "string" },
                        FreightCharge: { type: "decimal" },
                        Money: { type: "decimal" },
                    }
                }
            },
            batch: true,
            pageSize: 10
        });

        // call action get product comboxfor
        var dataProduct = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/admin/Product/GetProduct",
                    dataType: "json"
                }
            },
            schema: {
                model: {
                    id: "ID",
                    fields: {
                        ID: { type: "int" },
                        ProductName: { type: "string" },
                        DisplayName: { type: "string" }
                    }
                }
            },
            serverFiltering: true
        });

        // call function delete table detail
        var windowdelete = $("#windowdelete").kendoWindow({
            title: "Xác nhận xoá",
            visible: false,
            width: "400px",
            height: "350px",
        }).data("kendoWindow");

        var windowNotice = $("#windowNotice").kendoWindow({
            title: "Lưu ý",
            visible: false,
            width: "400px",
            height: "150px"
        }).data("kendoWindow");

        // set columns for kendo grid
        var columns = [
            { field: "ProductID",width:"200px", editor: ProductComboboxEditor, template: "#=ProductDisplayName#", title: "Hàng hoá", attributes: { "id": "ProductDisplayName" } },
            { field: "AvailableQuantity", title: "Tồn kho", attributes: { "class": "total disable" }, template: "#= (data.AvailableQuantity !== undefined) ? kendo.format('{0:n2} lít', parseFloat(data.AvailableQuantity)) : '' #"},
            { field: "SaleAmount", title: "Số lượng", editor: weightEditor, attributes: { "class": "total", "onkeydown": "checkknumber(this)" }, template: "#= (data.SaleAmount && data.SaleAmount !== undefined) ? kendo.format('{0:n2} lít', parseFloat(data.SaleAmount)) : '' #" },
            { field: "SalePrice", title: "Giá bán", attributes: { "class": "total k-number", "onkeydown": "checkknumber(this)" }, template: "#= (data.SalePrice && data.SalePrice !== undefined) ? kendo.format('{0:n0}đ', parseFloat(data.SalePrice)) : '' #" },
            { field: "ListPrice", title: "Giá niêm yết", attributes: { "class": "total k-number", "onkeydown": "checkknumber(this)" }, template: "#= (data.ListPrice && data.ListPrice !== undefined) ? kendo.format('{0:n0}đ', parseFloat(data.ListPrice)) : '' #" },
            //{ field: "FreightCharge", title: "Cước", attributes: { "class": "total k-number", "onkeydown": "checkknumber(this)" }, template: "#= (data.FreightCharge && data.FreightCharge !== undefined) ? kendo.format('{0:n0}đ', parseFloat(data.FreightCharge)) : '' #" },
            { field: "InvoiceType", editor: InvoiceDropDown, template: "#=InvoiceDisplayName#", title: "Loại GD", attributes: { "class": "total", "id": "InvoiceDisplayName" } },
            { field: "Money", title: "Thành tiền", attributes: { "class": "total k-number disable" }, template: "#= (data.Money !== undefined) ? kendo.format('{0:n0}đ', parseFloat(data.Money)) : '' #" },
            { field: "CustomerPayment", title: "Khách trả", attributes: { "class": "total", "onkeydown": "checkknumber(this)" }, template: "#= (data.CustomerPayment && data.CustomerPayment !== undefined) ? kendo.format('{0:n0}đ', parseFloat(data.CustomerPayment)) : '' #" },
            // command delete row invoice detail
            {
                command: [{
                    name: "Delete",
                    text: "Xoá",
                    click: function (e) {
                        e.preventDefault();
                        var tr = $(e.target).closest("tr");
                        var data = this.dataItem(tr);
                        if (data.SaleAmount === undefined) {
                            data.SaleAmount = 0;
                        }
                        if (data.CostPrice == undefined) {
                            data.CostPrice = 0;
                        }
                        if (data.SalePrice === undefined) {
                            data.SalePrice = 0;
                        }
                        if (data.ListPrice === undefined) {
                            data.ListPrice = 0;
                        }
                        if (data.SupplierDiscount === undefined) {
                            data.SupplierDiscount = 0;
                        }
                        if (data.FreightCharge === undefined) {
                            data.FreightCharge = 0;
                        }
                        if (data.InvoiceType === undefined) {
                            data.InvoiceType = 0;
                        }
                        if (data.Money === undefined) {
                            data.Money = 0;
                        }
                        if (data.CustomerPayment === undefined) {
                            data.CustomerPayment = 0;
                        }

                        windowdelete.content(windowTemplate(data));
                        windowdelete.center().open();

                        $("#yesButton").click(function () {
                            editdetail.dataSource.remove(data);
                            calculateTotal();
                            windowdelete.close();
                        })
                        $("#noButton").click(function () {
                            windowdelete.close();
                        })
                    }
                }]
                , width: "70px"
            }
        ];

        if ('@(WEB.WebHelpers.UserInfoHelper.GetUserData().StationID.HasValue)' === 'False') {
            //var itemcostprice = { field: "CostPrice", title: "Giá vốn", attributes: { "class": "total disable" }, template: "#= (data.CostPrice !== undefined) ? kendo.format('{0:n2}đ', parseFloat(data.CostPrice)) : '' #" };
            //columns.splice(4, 0, itemcostprice);
            //var itemdiscount = { field: "SupplierDiscount", title: "Chiết khấu", attributes: { "class": "total k-number", "onkeydown": "checkknumber(this)" }, template: "#= (data.SupplierDiscount ) ? kendo.format('{0:n0}đ', parseFloat(data.SupplierDiscount)) : '' #" };

            //columns.splice(6, 0, itemdiscount);
        }

        // use kendoGrid
        var editdetail = $("#editdetail").kendoGrid({
            dataSource: dataSource,
            pageable: true,
            toolbar: [{ name: "create", text: "Thêm" }],
            columns: columns,
            editable: true,
            dataBound: onDataBound,
            edit: function (e) {

            /*GET DATA STATION*/
                if ($("#ComboboxStation").data('kendoComboBox')) {
                    datamodel.StationID = $("#ComboboxStation").data('kendoComboBox').value();
                } else {
                    datamodel.StationID = $("#StationID").val();
                }

            /*READONLY EDIT*/
                $('.k-number').find("input").keypress(function (event) {
                    if (isNaN(String.fromCharCode(event.which))) {
                        event.preventDefault();
                    }
                });

                $('[name="AvailableQuantity"]').attr("readonly", true);
                $('[name="Money"]').attr("readonly", true);
                $('[name="CostPrice"]').attr("readonly", true);

                var model = e.model;

            /*GET current ProductID */
                var dataItem = $("#editdetail").data("kendoGrid").dataItem(e.container.closest("tr"));

                if (dataItem !== undefined && dataItem.ProductID !== undefined) {
                    if (typeof dataItem.ProductID === "object" && dataItem.ProductID != null) {
                        var currentProductID = dataItem.ProductID.ID;
                        var currentProductName = dataItem.ProductID.ProductDisplayName;
                    }
                    else if (typeof dataItem.ProductID !== "object" && dataItem.ProductID != "") {
                        var currentProductID = dataItem.ProductID;
                        var currentProductName = dataItem.ProductDisplayName;
                    }
                };

            /*GET current SaleAmount */
                if (dataItem !== undefined && dataItem.SaleAmount !== undefined) {
                    var currentSaleAmount = dataItem.SaleAmount
                }
                else {
                    var currentSaleAmount = 0;
                }
                var isStationValid = true;

                /*MODEL BIND CHANGE*/
                e.model.bind("change", function (row) {
                    function setNullModel() {
                        model.set("ProductID", "");
                        model.set("SaleAmount", undefined);
                        model.set("AvailableQuantity", undefined);
                        model.set("CostPrice", undefined);
                        model.set("SalePrice", undefined);
                        model.set("ListPrice", undefined);
                        model.set("SupplierDiscount", undefined);
                        model.set("InvoiceType", undefined);
                        model.set("Money", undefined);
                        model.set("CustomerPayment", undefined);
                    }
                    function setCurrentModel() {
                        console.log(currentProductName);
                        /*Set current SALEAMOUNT */
                        var grid = JSON.parse(gridArr);
                        for (var i = 0; i < grid.length; i++) {
                            if (datamodel.ProductID == grid[i].ProductID) {
                                model.set("ProductID", grid[i].ProductID);
                                model.set("SaleAmount", grid[i].SaleAmount);
                                model.set("SalePrice", grid[i].SalePrice);
                            }
                        }
                    }
                    function checkHasStation() {
                        if (datamodel.StationID == "" || datamodel.StationID == null) {
                            e.model.unbind("change");
                            alert("Xin hãy chọn cửa hàng trước khi thêm chi tiết đơn bán hàng");
                            setNullModel();
                            editdetail.refresh();
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                    function checkAvailableQuantity() {
                        var availableQuantity = model.get("AvailableQuantity");
                        var amount = model.get("SaleAmount");
                        if ((availableQuantity + currentSaleAmount) < amount) {
                            alert("Số lượng hàng nhập không được quá số lượng hàng tồn kho !");
                            model.set("SaleAmount", 0);
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                    function calAndSetMoney() {
                        var money = 0;
                        if (model.get("SaleAmount") == undefined || model.get("SalePrice") == undefined) {
                            model.set("Money", money);
                            if (model.get("InvoiceDisplayName") == "Tiền mặt") {
                                model.set("CustomerPayment", money);
                            } else {
                                model.set("CustomerPayment", 0);
                            }
                        }
                        else {
                            money = model.get("SaleAmount") * model.get("SalePrice");
                            model.set("Money", money);
                            if (model.get("InvoiceDisplayName") == "Tiền mặt") {
                                model.set("CustomerPayment", money);
                            } else {
                                model.set("CustomerPayment", 0);
                            }
                        }
                    }

                    datamodel.Amount = model.get("SaleAmount");
                    var isProductValid = false;
                    if (row.field === "ProductID") {
                        //alert("ProductID");
                        if (checkHasStation()) {
                            datamodel.Time = $("#Date").val();
                            var grid = $("#editdetail").data("kendoGrid");
                            var data = grid.dataSource.data();
                            var selectedProductId = model.get("ProductID");
                            if (typeof selectedProductId === "object" && selectedProductId != null) {
                                var selectedProductName = dataProduct.data().filter(x => x.ID === selectedProductId.ID)[0].ProductDisplayName;
                                datamodel.ProductID = selectedProductId.ID;
                                isProductValid = true;
                            }
                            else if (typeof selectedProductId !== "object" && selectedProductId != "" && selectedProductId !== undefined) {
                                if (dataProduct.data().filter(x => x.ID === selectedProductId).length != 0) {
                                    var selectedProductName = dataProduct.data().filter(x => x.ID === selectedProductId)[0].ProductDisplayName;
                                    datamodel.ProductID = selectedProductId;
                                    isProductValid = true;
                                } else {
                                    selectedProductName = "";
                                    model.set("ProductDisplayName", selectedProductName);
                                    model.set("ProductID", '');
                                }
                            }


                            let findDuplicates = arr => arr.filter((item, index) => item !== "" && arr.indexOf(item) != index);
                            var productIds = [];
                            for (var i = 0; i < data.length; i++) {
                                if (isNaN(data[i].ProductID)) {
                                    if (data[i].ProductID && (data[i].ProductID).length != 0) {
                                        productIds.push(data[i].ProductID.ID);
                                    }
                                } else if (!isNaN(data[i].ProductID)) {
                                    productIds.push(data[i].ProductID);
                                }
                            }
                            if (findDuplicates(productIds).length > 0) {
                                alert("Hàng hoá này đã có trong đơn!!");
                                model.set("ProductID", currentProductID);
                                editdetail.refresh();
                                e.model.unbind("change");
                                return;
                            }

                            if (isProductValid && datamodel.ProductID !== undefined && datamodel.StationID !== ""
                                && datamodel.StationID !== undefined && model.get("ProductID") != undefined && datamodel.Time !== undefined) {
                                // call ajax check auto fillter all attr
                                $.ajax({
                                    url: '@Url.Action("ProductChangeResult", "Invoice")',
                                    type: 'POST',
                                    contentType: "application/json",
                                    async: false,
                                    data: JSON.stringify(datamodel),
                                    success: function (result) {
                                        var grid = $('#editdetail').data('kendoGrid');
                                        var row = grid.tbody.find("tr[data-uid='" + e.model.uid + "']");
                                        var dataItem = grid.dataItem(row);
                                        dataItem.set("AvailableQuantity", result.QuantityLeft);
                                        dataItem.set("SalePrice", result.Price);
                                        dataItem.set("ListPrice", result.ListedPrice);
                                        dataItem.set("CostPrice", result.CostPrice);
                                        dataItem.set("FreightCharge", result.FreightCharges);
                                        dataItem.set("ProductDisplayName", result.ProductDisplayName);

                                        var discount = 0;
                                        if (model.get("ListPrice") == undefined || model.get("CostPrice") == undefined || model.get("CostPrice") == 0) {
                                            model.set("SupplierDiscount", discount);
                                        }
                                        else {
                                            discount = model.get("ListPrice") / 1.1 - model.get("CostPrice");
                                            model.set("SupplierDiscount", discount);
                                        }
                                        
                                        if (checkAvailableQuantity()) {
                                            editdetail.refresh();
                                            calculateTotal();
                                        }
                                    }
                                });
                            }

                            model.set("ProductDisplayName", selectedProductName);



                            /*Unbind Product change*/
                            if (isProductValid) {
                                e.model.unbind("change");
                            }
                            else {
                                setCurrentModel();
                            }
                        }
                    }

                    if (row.field === "SaleAmount") {
                        //alert("SaleAmount");
                        if (checkHasStation()) {
                            calAndSetMoney();
                            if (checkAvailableQuantity()) {
                                if (datamodel.ProductID != undefined) {
                                            $.ajax({
                                                url: '@Url.Action("CalculationSaleAmount", "Price")',
                                                type: 'POST',
                                                contentType: "application/json",
                                                data: JSON.stringify(datamodel),
                                                async: false,
                                                success: function (result) {
                                                    var costPrice = result;
                                                    e.model.unbind("change");
                                                    model.set("CostPrice", costPrice);

                                                    var discount = 0;
                                                    if (model.get("ListPrice") == undefined || model.get("CostPrice") == undefined) {
                                                        model.set("SupplierDiscount", discount);
                                                    }
                                                    else {
                                                        discount = model.get("ListPrice") / 1.1 - model.get("CostPrice");
                                                        model.set("SupplierDiscount", discount);
                                                    }

                                                    // freight charge
                                                    var modelFreightCharge = {};
                                                    modelFreightCharge.StationId = datamodel.StationID;
                                                    modelFreightCharge.CostPrice = costPrice;
                                                    modelFreightCharge.ListPrice = model.get("ListPrice");

                                                    $.ajax({
                                                        url: '@Url.Action("CalculationFreightCharge", "Price")',
                                                        type: 'POST',
                                                        contentType: "application/json",
                                                        async: false,
                                                        data: JSON.stringify(modelFreightCharge),
                                                        success: function (result) {
                                                            e.model.unbind("change");
                                                            model.set("FreightCharge", result);
                                                            editdetail.refresh();
                                                            calculateTotal();
                                                        }
                                                    });

                                                    editdetail.refresh();
                                                    calculateTotal();
                                                }
                                            });
                                        }
                                        editdetail.refresh();
                            }

                        } else {
                            setCurrentModel();
                        }
                    }

                    if (row.field === "SalePrice") {
                        //alert("SalePrice");
                        if (checkHasStation()) {
                            calAndSetMoney();
                        }
                        else {
                            setCurrentModel();
                        }
                    }

                    if (row.field === "ListPrice" || row.field === "CustomerPayment") {
                        //alert("ListPrice");
                        if (checkHasStation()) {

                        }
                        else {
                            setCurrentModel();
                        }
                    }

                    if (row.field == "InvoiceType") {
                        var setDisplay = dataSource.data();
                        var Invoice = setDisplay[0].InvoiceType;
                        model.set("InvoiceDisplayName", Invoice);
                        if (model.get("InvoiceDisplayName") != "Tiền mặt") {
                            model.set("CustomerPayment", 0);
                        } else {
                            var money = model.get("Money");
                            model.set("CustomerPayment", money);
                        }
                    }
                });
                // end model bind
            }
        }).data("kendoGrid");

        // function caculate total all feild
        function calculateTotal() {
            var grid = $("#editdetail").data("kendoGrid");
            var data = grid.dataSource.data();
            if (data.length !== 0) {
                var totalMoney = 0;
                var totalQuantity = 0;
                var totalFreightCharge = 0;
                var totalDiscount = 0;
                var customerPayment = 0;
                for (var i = 0; i < data.length; i++) {
                    if (data[i].Money != undefined && data[i].SupplierDiscount != "") {
                        totalMoney += parseFloat(data[i].Money);
                    }
                    if (data[i].SaleAmount != undefined && data[i].SupplierDiscount != "") {
                        totalQuantity += parseFloat(data[i].SaleAmount );
                    }
                    if (data[i].FreightCharge != undefined && data[i].FreightCharge != "") {
                        totalFreightCharge += parseFloat(data[i].FreightCharge);
                    }
                    if (data[i].SupplierDiscount != undefined && data[i].SupplierDiscount != "") {
                        totalDiscount += parseFloat(data[i].SupplierDiscount);
                    }
                    if (data[i].CustomerPayment != undefined && data[i].CustomerPayment != "") {
                        customerPayment += parseFloat(data[i].CustomerPayment);
                    }
                }
                // set all total feild table parent
                $('#TotalMoney').val(kendo.format('{0:n0}đ', parseFloat(totalMoney)));
                $('#TotalQuantity').val(kendo.format('{0:n2}đ', parseFloat(totalQuantity)));
                $('#TotalFreightCharge').val(kendo.format('{0:n0}đ', parseFloat(totalFreightCharge)));
                $('#TotalDiscount').val(kendo.format('{0:n0}đ', parseFloat(totalDiscount)));
                $('#CustomerPayment').val(kendo.format('{0:n0}đ', parseFloat(customerPayment)));
            }
        }
        // function get product click column product
        function ProductComboboxEditor(container, options) {
            $('<input name="ProductID"  id="ComboboxProduct" required validationMessage="Vui lòng chọn hàng hóa">')
                .appendTo(container)
                .kendoComboBox({
                    autoBind: true,
                    dataTextField: "ProductDisplayName",
                    dataValueField: "ID",
                    dataSource: dataProduct,
            });
        };
        // input decimal
        function weightEditor(container, options) {
            $('<input name="' + options.field + '"/>')
                .appendTo(container)
                .kendoNumericTextBox({
                    decimals: 2,
                })
        };

        // dropdown list Invoice type
        function InvoiceDropDown(container, options) {
            $('<input name="InvoiceType"  id="invoiceType" required validationMessage="Vui lòng Loại GD">')
                .appendTo(container)
                .kendoDropDownList({
                    dataSource: [
                        { text: "Tiền mặt", value: "Tiền mặt" },
                        { text: "Nợ tiền mặt", value: "Nợ tiền mặt" },
                        { text: "Hợp đồng", value: "Hợp đồng" }
                    ],
                    dataTextField: "text",
                    dataValueField: "value"
                });
        };

        // check station befor add detail
        $(document).ready(function () {
            $(".test").next().click(function () {
                var checkFirst = $("#ComboboxStation").data('kendoComboBox').value();
                if (checkFirst !== "") {
                    if (localStorage.getItem("changeStationNoticeHidden") !== "True") {
                        windowNotice.content(kendo.template($("#windowNoticeTemplate").html()));
                        windowNotice.center().open();

                        $("#okButton").click(function () {
                            localStorage.setItem("changeStationNoticeHidden", "True");
                            windowNotice.close();
                            ("#ComboboxStation").kendoDropDownList.close();
                        })

                        $("#closeButton").click(function () {
                            windowNotice.close();
                            ("#ComboboxStation").kendoDropDownList.close();
                        })
                    }
                }
            });
            $(".k-grid-add").click(function () {
                if ($("#ComboboxStation").data('kendoComboBox')) {
                    stationID = $("#ComboboxStation").data('kendoComboBox').value();
                } else {
                    stationID= $("#StationID").val();
                }
                if (stationID == "") {
                    alert("Xin hãy lưu ý chọn cửa hàng trước khi thêm chi tiết đơn hàng");
                }
            });
            $(".k-dropdown-wrap").hover(function () {
                $("k-i-arrow-s").show();
            });
            $("[data-field='CostPrice']").html("Giá vốn <span style='color: red'>*</span>");
            $("[data-field='SupplierDiscount']").html("Chiết khấu <span style='color: red'>*</span>");
            $("[data-field='FreightCharge']").html("Cước <span style='color: red'>*</span>");
        });
    </script>
</div>
<style>
    .k-webkit {
        overflow-y: auto !important;
    }
</style>
<script>
    function checkemployer() {
        if ('@checkEmployee' == "True") {
            var modelajax = {};
            var employer = {};
            modelajax.Time = $("#Date").val();
            var productID = localStorage.getItem("productIDcookie");
            modelajax.ProductID = localStorage.getItem("productIDcookie");
            modelajax.StationID = $("#ComboboxStation").val();
            if (modelajax.ProductID !== null && modelajax.StationID !== null && modelajax.Time !== null && modelajax.ProductID !== undefined && modelajax.StationID !== undefined && modelajax.Time !== undefined) {
                $.ajax({
                    url: '@Url.Action("ProductChangeResult", "Invoice")',
                    type: 'POST',
                    contentType: "application/json",
                    data: JSON.stringify(modelajax),
                    async: false,
                    success: function (data) {
                        employer = data;
                    }
                });
            };
            employer.ProductID = modelajax.ProductID;
            return employer;
        } else {
            var employer = {};
            employer.ProductID = null;
            return employer;
        }
    }
</script>