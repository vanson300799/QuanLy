@{
    WebContext db = new WebContext();
    var roleLock = "Manager";
    var lastRow = 11;
    var roles = Roles.GetRolesForUser();
    var userLock = db.WebRoles.Where(x => roles.Contains(x.RoleName)).Select(y => y.RoleName).ToList();
    var userRoleIds = db.WebRoles.Where(x => roles.Contains(x.RoleName)).Select(y => y.RoleId).ToList();
    var roleWebModule = db.AccessWebModuleRoles.AsNoTracking().FirstOrDefault(x => userRoleIds.Contains(x.RoleId) && x.WebModule.URL == "/admin/Invoice");
    var checkEmployee = WEB.WebHelpers.UserInfoHelper.GetUserData().StationID.HasValue;
}
@{
    ViewBag.Title = "Đơn Bán Hàng";
}
<script type="text/javascript">
    function refresh_detail() {
        $("#detail").data("kendoGrid").dataSource.data([]);
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    var rowselected = [];
    var parent;
    //function returnInvoiceCode(e) {
    //    $("#DetailBillID").html("Chi tiết đơn hàng " + e);
    //}

    var selectedCell = null;
    function change_handler(e) {
        var $grid = e.sender; //grid ref
        var $cell = $grid.select(); // selected td
        var $row = $cell.closest('tr'); //selected tr
        var cell_index = $cell.index();
        selectedCell = $cell;
        if (cell_index === @lastRow) {
            return;
        }

        $('td.k-state-selected').closest('tr').find('td').addClass('k-state-selected');

        //$grid.clearSelection();
        //$grid.select($row);
        var rowData = $grid.dataItem($row);
        rowselected = [];
        var len = this.select().length;
        for (i = 0; i < len; i++) {
            rowselected.push(rowData.ID);
            parent = rowData.ID;
            InvoiceCode = rowData.InvoiceCode;
            localStorage.parent = parent;
        }
        loaddata(parent);
        //returnInvoiceCode(InvoiceCode);
        $(".title-dealDetail").css("display", "block");
    }
    function binding_handler(e) {
        rowselected = [];
    }
    function delete_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/Invoice/delete/" + dataItem.ID);
    }

    function edit_handler(e) {
        //e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //opendlg("/admin/Invoice/edit/" + dataItem.ID);
        var $row = selectedCell.closest('tr'); //selected tr
        var rowData = $("#grid").data("kendoGrid").dataItem($row);
        opendlg("/admin/Invoice/edit/" + rowData.ID);
    }

    function lock_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        $.ajax({
                url: "@Url.Action("RecordLock", "Invoice")",
                contentType: "application/json",
            method: "post",
            data: JSON.stringify({ id: dataItem.ID}),
                          success: function (data) {
                                lock_success(data);
                          },
            error: function (d) {
                console.log(d.responseText);
                          }
                    });
    }

    function SetIconLock(e) {
        if (e) {
            var status = "Đã khoá";
            return status;
        }
        else {
            var status = "Đang mở";
            return status;
        }
    }

    function lock_success(data) {
        if (!data.ErrorMessage || data.ErrorMessage.length === 0) {
            var grid = $("#grid").data("kendoGrid").dataSource.get(data.ID);
            grid.set("IsLock", data.currentIsLock);
            if (data.currentIsLock) {
                $("#grid").data("kendoGrid").tbody.find("tr[data-uid='" + grid.uid + "']").find(".k-grid-Edit").remove();
                $("#grid").data("kendoGrid").tbody.find("tr[data-uid='" + grid.uid + "']").find(".k-grid-delete").remove();
                $("#grid").data("kendoGrid").tbody.find("tr[data-uid='" + grid.uid + "']").find(".k-grid-Lock").css("background-image", "url(/Content/themes/admin/img/lock.png)");
            }
            else {
                $("#grid").data("kendoGrid").tbody.find("tr[data-uid='" + grid.uid + "']").find(".k-grid-Lock").css("background-image", "url(/Content/themes/admin/img/unlock.png)");
            }
        } else {
            alert(data.ErrorMessage);
        }
    }

    function onGridDataBound(e) {
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var model = grid.dataItem(this);
            if (model.Date < new Date('@ViewBag.datekey')) {
                $(this).find(".k-grid-Edit").parent().html("Đã khoá sổ");
                $(this).find(".k-grid-Edit").remove();
                $(this).find(".k-grid-delete").remove();
            }
            if (model.IsLock) {
                $(this).find(".k-grid-Edit").remove();
                $(this).find(".k-grid-delete").remove();
                $(this).find(".k-grid-Lock").css("background-image", "url(/Content/themes/admin/img/lock.png)");
            }
            else {
                 $(this).find(".k-grid-Lock").css("background-image", "url(/Content/themes/admin/img/unlock.png)");
            }
        });
    }

    $(document).ready(function () {
        loaddata();
        $("#btnadd").click(function () {
            localStorage.removeItem("parent");
            opendlg("/admin/Invoice/add");
            $("#background-black").css("height", "100vh");
            $("#background-black").css("overflow", "hidden");
            $(".k-i-close").click(function () {
                $("#background-black").css("overflow", "auto");
            });
        });
        $("#btnedit").click(function () {
            if (rowselected.length > 0) {
                opendlg("/admin/Invoice/edit/" + rowselected[0]);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });
        $("#btndelete").click(function () {
            if (rowselected.length > 0) {
                opendlg("/admin/Invoice/deletes/" + rowselected);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });
    });

    jQuery.validator.methods.date = function (value, element) {
        var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
        if (isChrome) {
            var d = new Date();
            return this.optional(element) || !/Invalid|NaN/.test(parseDate(value));
        } else {
            return this.optional(element) || !/Invalid|NaN/.test(parseDate(value));
        }
    };
</script>
<div id="main">
    <div id="left"></div>
    @if (roleWebModule != null && roleWebModule.View.HasValue && !roleWebModule.View.Value)
    {
        @Html.Action("Denied", "Account", new { area = "admin" })
    }
    @if (roleWebModule != null && roleWebModule.View.HasValue && roleWebModule.View.Value)
    {
        <div class="container-fluid">
            <div class="page-header">
                <div class="pull-left">
                    <div class="breadcrumbs">
                        <h1>@ViewBag.title</h1>
                    </div>
                </div>
                <div class="pull-right">
                    <ul class="actions">
                        @if (roleWebModule != null && roleWebModule.Add.HasValue && roleWebModule.Add.Value)
                        {

                            <li>
                                <a href="#" id="btnadd" class="k-button"><i class="icon-plus"></i> @WebModels.WebResources.Add</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="row-fluid" id="scroll-table">
                <div class="span12">
                    <div class="box">
                        <div class="box-content nopadding">
                            @(Html.Kendo().Grid<InvoiceIndexViewModel>()
                                .Name("grid")
                                .Selectable()
                                .Columns(columns =>
                                {
                                    columns.Bound(p => p.Date).Title(WebModels.WebResources.Date)
                                    .Filterable(filterable =>filterable.UI(@<text>function (element) {
                                                element.kendoDateTimePicker({
                                                    culture: 'vi-VN'
                                                });
                                            }</text>))
                                    .Format("{0:dd/MM/yyyy HH:mm}").Width(150).HtmlAttributes(new { style = "text-align:center;" });
                                    columns.Bound(p => p.CustomerName).Title(WebModels.WebResources.CustomerID);
                                    columns.Bound(p => p.Vehicle).Title(WebModels.WebResources.Vehicle);
                                    columns.Bound(p => p.InvoiceCode).Title(WebModels.WebResources.BillID).HtmlAttributes(new { style = "text-align:center;" });
                                    columns.Bound(p => p.StationName).Title(WebModels.WebResources.Shop);
                                    columns.Bound(p => p.Note).Title(WebModels.WebResources.Information);
                                    columns.Bound(p => p.TotalQuantity).Title(WebModels.WebResources.Quantity).HtmlAttributes(new { style = "text-align:center;" }).Format("{0:N2} lít");
                                    columns.Bound(p => p.TotalFreightCharge).Title(WebModels.WebResources.FreightCharge).HtmlAttributes(new { style = "text-align:center;" }).Format("{0:N0}đ");
                                    if (!checkEmployee)
                                    {
                                        columns.Bound(p => p.TotalDiscount).Title(WebModels.WebResources.Discount).HtmlAttributes(new { style = "text-align:center;" }).Format("{0:N0}đ");
                                    }
                                    columns.Bound(p => p.TotalMoney).Title(WebModels.WebResources.TotalMoney).HtmlAttributes(new { style = "text-align:center;" }).Format("{0:N0}đ");
                                    columns.Bound(p => p.CustomerPayment).Title(WebModels.WebResources.BackMoneyCustomer).HtmlAttributes(new { style = "text-align:center;" }).Format("{0:N0}đ");
                                    columns.Bound(p => p.IsLock).Title(WebModels.WebResources.Status)
                                                        .HtmlAttributes(new { style = "text-align:center;" })
                                                        .ClientTemplate("#=SetIconLock(IsLock)#");
                                    columns.Command(command =>
                                    {
                                        if (userLock.Contains(roleLock))
                                        {
                                            command.Custom("Lock").Click("lock_handler");
                                        }
                                        if (roleWebModule != null && roleWebModule.Edit.HasValue && roleWebModule.Edit.Value)
                                        {
                                            command.Custom(Resources.Common.Edit).Click("edit_handler");
                                        }

                                        if (roleWebModule != null && roleWebModule.Delete.HasValue && roleWebModule.Delete.Value)
                                        {
                                            command.Destroy();
                                        }
                                    }).HtmlAttributes(new { style = "text-align:center;", @class = "test" }).Title("Hành động").Width(300);
                                })
                                .Pageable()
                                .Selectable(select => select.Mode(GridSelectionMode.Single).Type(GridSelectionType.Cell))
                                .Sortable()
                                .Filterable()
                                .Editable(ed => ed.DisplayDeleteConfirmation("Bạn có chắc chắn xoá mục này?"))
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .Sort(sort => sort.Add("Date").Descending())
                                    .Batch(true)
                                    .Events(events => { events.Error("error_handler"); events.RequestEnd("refresh_detail"); })
                                    .Model(model => { model.Id(p => p.ID); })
                                    .PageSize(10)
                                    .Read(read => read.Action("Invoice_Read", "Invoice"))
                                    .Destroy(destroy => destroy.Action("Invoice_Destroy", "Invoice"))
                                 )
                                .Events(events => events.Change("change_handler").DataBinding("binding_handler").DataBound("onGridDataBound"))
                            )
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="container-fluid" id="dealDetail">
            <div class="row-fluid">
                <div class="span12">
                    <div class="title-dealDetail detailInvoice">
                        <ul class="nav nav-tabs">
                            <li class="active"><a href="#">Chi tiết đơn bán hàng</a></li>
                        </ul>
                        <br>
                    </div>
                    <div class="box">
                        <div class="box-content nopadding">
                            <div id="detail"></div>
                            <script>
                                var rowselected;
                                var columns = [{ field: "ProductID", title: "Hàng hóa", template: "#=ProductCode# : #=ProductName#" },
                                { field: "SaleAmount", title: "Số lượng (lít)", template: "#= (data.SaleAmount) ? kendo.format('{0:n2} lít', parseFloat(data.SaleAmount)) : '' #" },
                                { field: "SalePrice", title: "Giá bán", template: "#= (data.SalePrice) ? kendo.format('{0:n0}đ', parseFloat(data.SalePrice)) : '' #" },
                                { field: "ListPrice", title: "Giá niêm yết", template: "#= (data.ListPrice) ? kendo.format('{0:n0}đ', parseFloat(data.ListPrice)) : '' #" },
                                //{ field: "FreightCharge", title: "Cước", template: "#= (data.FreightCharge) ? kendo.format('{0:n0}đ', parseFloat(data.FreightCharge)) : '' #" },
                                { field: "InvoiceType", title: "Loại GD" },
                                { field: "Money", title: "Thành tiền", template: "#= (data.Money) ? kendo.format('{0:n0}đ', parseFloat(data.Money)) : '' #" },
                                { field: "CustomerPayment", title: "Khách trả", template: "#= (data.CustomerPayment) ? kendo.format('{0:n0}đ', parseFloat(data.CustomerPayment)) : '' #" }];

                                if ('@checkEmployee' === 'False') {
                                    //var itemcostprice = { field: "CostPrice", title: "Giá vốn", template: "#= (data.CostPrice) ? kendo.format('{0:n2}đ', parseFloat(data.CostPrice)) : '' #" };
                                    //columns.splice(3, 0, itemcostprice);
                                    //var itemdiscount = { field: "SupplierDiscount", title: "Chiết khấu", template: "#= (data.SupplierDiscount) ? kendo.format('{0:n0}đ', parseFloat(data.SupplierDiscount)) : '' #" };
                                    //columns.splice(5, 0, itemdiscount);
                                };

                                function loaddata(p) {
                                        if ($("#detail").data("kendoGrid") != null) { $('#detail').html(''); delete $("#detail").data("kendoGrid"); }
                                        $("#detail").kendoGrid({
                                            dataSource: {
                                                type: "json",
                                                transport: {
                                                    read: {
                                                        url: "/admin/Invoice/InvoiceDetailIndex/" + p,
                                                    }
                                                },
                                                emptyMsg: 'This grid is empty',
                                                schema: {
                                                    model: {
                                                        ID: "ID",
                                                        fields: {
                                                            InvoiceType: { type: "string" },
                                                            ProductCode: { type: "string" },
                                                            ProductName: { type: "string" },
                                                            CostPrice: { type: "decimal" },
                                                            SalePrice: { type: "decimal" },
                                                            ListPrice: { type: "decimal" },
                                                            SaleAmount: { type: "decimal"},
                                                            CustomerPayment: { type: "decimal" },
                                                            SupplierDiscount: { type: "decimal" },
                                                            FreightCharge: { type: "decimal" },
                                                            Money: { type: "decimal" },
                                                        }
                                                    }
                                                }
                                            },
                                            scrollable: false,
                                            columns: columns,
                                                dataBinding: function () {
                                                    rowselected = new Array();
                                                },
                                                change: function () {
                                                    rowselected = [];
                                                    var len = this.select().length;
                                                    for (i = 0; i < len; i++) {
                                                        rowselected.push(this.dataItem(this.select()[i]).ID);
                                                    }
                                                }
                                            });
                                }
                            </script>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
