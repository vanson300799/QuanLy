@{
    WebContext db = new WebContext();
    var roles = Roles.GetRolesForUser();
    var userRoleIds = db.WebRoles.Where(x => roles.Contains(x.RoleName)).Select(y => y.RoleId).ToList();
    var roleWebModule = db.AccessWebModuleRoles.AsNoTracking().FirstOrDefault(x => userRoleIds.Contains(x.RoleId) && x.WebModule.URL == "/admin/NoteBookKey");
}
@{
    ViewBag.Title = "Chức Năng Khóa Sổ";
}
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    var rowselected = [];
    function change_handler(e) {
        rowselected = [];
        var len = this.select().length;
        for (i = 0; i < len; i++) {
            rowselected.push(this.dataItem(this.select()[i]).ID);
        }
    }
    function binding_handler(e) {
        rowselected = [];
    }
    function changepassword_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/NoteBookKey/changepassword/?userName=" + dataItem.UserName);
    }
    function delete_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/NoteBookKey/delete/" + dataItem.ID);
    }

    function edit_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/NoteBookKey/edit/" + dataItem.ID);
    }

    function modules_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/NoteBookKey/ModulesMapping/" + dataItem.ID);

    }
    function sites_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/NoteBookKey/AdminSitesMapping/" + dataItem.ID);
    }

    $(document).ready(function () {
        $("#btnadd").click(function () {
            opendlg("/admin/NoteBookKey/add");
        });
        $("#btnedit").click(function () {
            if (rowselected.length > 0) {
                opendlg("/admin/NoteBookKey/edit/" + rowselected[0]);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });
        $("#btndelete").click(function () {
            if (rowselected.length > 0) {
                opendlg("/admin/NoteBookKey/deletes/" + rowselected);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });
    });

    jQuery.validator.methods.date = function (value, element) {
        var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
        if (isChrome) {
            var d = new Date();
            return this.optional(element) || !/Invalid|NaN/.test(parseDate(value));
        } else {
            return this.optional(element) || !/Invalid|NaN/.test(parseDate(value));
        }
    };
    @*$(function () {
        $.validator.methods.date = function (value, element) {
            return this.optional(element) || moment(value, "dd/MM/YYYY", true).isValid();
        }
    });*@
</script>
<div id="main">
    <div id="left"></div>
    @if (roleWebModule != null && roleWebModule.View.HasValue && !roleWebModule.View.Value)
    {
        @Html.Action("Denied", "Account", new { area = "admin" })
    }
    @if (roleWebModule != null && roleWebModule.View.HasValue && roleWebModule.View.Value)
    {
        <div class="container-fluid">
            <div class="page-header">
                <div class="pull-left">
                    <div class="breadcrumbs">
                        <h1 class="notbookkey-title">@ViewBag.title</h1>
                    </div>
                </div>
                <div class="pull-right">
                    <ul class="actions">
                        @*@if (roleWebModule != null && roleWebModule.Delete.HasValue && roleWebModule.Delete.Value)
                {
                    <li>
                        <a href="#" id="btndelete" class="k-button"><i class="icon-trash"></i> @Resources.Common.Delete  </a>
                    </li>
                }*@
                    </ul>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12">
                    <div class="box">
                        <div class="box-content nopadding">
                            @(Html.Kendo().Grid<NoteBookKeyViewModel>()
                .Name("grid")
                .Columns(columns =>
                {
                    //columns.Bound(p => p.ID).Title(WebModels.WebResources.ID).Width(40);
                    columns.Bound(p => p.DateTimeKey).Title(WebModels.WebResources.DateTimeKey)
                    .Filterable(filterable =>filterable.UI(@<text>function (element) {
                                                element.kendoDatePicker({
                                                    culture: 'vi-VN'
                                                });
                                            }</text>))
                    .Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:center;" });
                    columns.Bound(p => p.ModifiedName).Title(WebModels.WebResources.ModifiedBy);
                    columns.Bound(p => p.ModifiedAt).Title(WebModels.WebResources.ModifiedDate)
                    .Filterable(filterable =>filterable.UI(@<text>function (element) {
                                                element.kendoDatePicker({
                                                    culture: 'vi-VN'
                                                });
                                            }</text>))
                    .Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:center;" });
                    columns.Command(command =>
                    {
                        //command.Custom("Module").Click("modules_handler");
                        //command.Custom("Site").Click("sites_handler");
                        if (roleWebModule != null && roleWebModule.Edit.HasValue && roleWebModule.Edit.Value)
                        {
                            command.Custom(Resources.Common.Edit).Click("edit_handler");
                        }
                    }).HtmlAttributes(new { style = "text-align:center;" }).Title("Hành động").Width(85);
                })
                    .Pageable()
                    .Selectable(select => select.Mode(GridSelectionMode.Multiple))
                    .Sortable()
                .Filterable()
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .Events(events => events.Error("error_handler"))
                    .Model(model =>
                    {
                        model.Id(p => p.ID);
                    })
                    .PageSize(10)
                    .Read(read => read.Action("NoteBookKey_Read", "NoteBookKey"))
                 )
            .Events(events => events.Change("change_handler").DataBinding("binding_handler"))
                        )
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<style>
    .k-webkit {
        overflow: auto !important;
    }
</style>