@model DebtManageViewModel
@{
    WebContext db = new WebContext();
    var roles = Roles.GetRolesForUser();
    var userRoleIds = db.WebRoles.Where(x => roles.Contains(x.RoleName)).Select(y => y.RoleId).ToList();
    var roleWebModule = db.AccessWebModuleRoles.AsNoTracking().FirstOrDefault(x => userRoleIds.Contains(x.RoleId) && x.WebModule.URL == "/admin/DebtManage");

}
@{
    ViewBag.Title = "Quản Lý Công Nợ";
}

<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    var rowselected = [];
    function change_handler(e) {
        rowselected = [];
        var len = this.select().length;
        for (i = 0; i < len; i++) {
            rowselected.push(this.dataItem(this.select()[i]).ID);
        }
    }
    function binding_handler(e) {
        rowselected = [];
    }
    function delete_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/DebtManage/delete/" + dataItem.ID);
    }

    function edit_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/DebtManage/edit/" + dataItem.ID);
    }

    $(document).ready(function () {
        $("#btnadd").click(function () {
            opendlg("/admin/DebtManage/add");
        });
        $("#btnedit").click(function () {
            if (rowselected.length > 0) {
                opendlg("/admin/DebtManage/edit/" + rowselected[0]);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });
        $("#btndelete").click(function () {
            if (rowselected.length > 0) {
                opendlg("/admin/DebtManage/deletes/" + rowselected);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });
    });

    jQuery.validator.methods.date = function (value, element) {
        var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
        if (isChrome) {
            var d = new Date();
            return this.optional(element) || !/Invalid|NaN/.test(parseDate(value));
        } else {
            return this.optional(element) || !/Invalid|NaN/.test(parseDate(value));
        }
    };

</script>
<div id="main">
    <div id="left"></div>
    @if (roleWebModule != null && roleWebModule.View.HasValue && !roleWebModule.View.Value)
    {
        @Html.Action("Denied", "Account", new { area = "admin" })
    }
    @if (roleWebModule != null && roleWebModule.View.HasValue && roleWebModule.View.Value)
    {
        <div class="container-fluid">
            <div class="page-header">
                <div class="pull-left">
                    <div class="breadcrumbs">
                        <h1>@ViewBag.title</h1>
                    </div>
                </div>
                <div class="pull-right">
                    @using (Html.BeginForm("ExportExcel", "DebtManage", FormMethod.Post, new { @id = "general", enctype = "multipart/form-data", @class = "form-horizontal fix" }))
                    {
                        <ul class="actions">
                            @if (roleWebModule != null && roleWebModule.Add.HasValue && roleWebModule.Add.Value)
                            {
                                <li>
                                    <a href="#" id="btnadd" class="k-button"><i class="icon-plus"></i> @WebModels.WebResources.Add </a>
                                </li>
                            }
                        </ul>

                        @Html.HiddenFor(m => m.DataExport)
                        <button id="btnsubmit" class="k-button">@WebModels.WebResources.ExportExcel</button>
                    }
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12">
                    <div class="box">
                        <div class="box-content nopadding">
                            @(Html.Kendo().Grid<DebtManageViewModel>()
                .Name("grid")
                .Selectable()
                .Columns(columns =>
                {
                    columns.Bound(p => p.Date).Title(WebModels.WebResources.Date).Width(150)
                    .Filterable(filterable =>filterable.UI(@<text>function (element) {
                                                element.kendoDateTimePicker({
                                                    culture: 'vi-VN'
                                                });
                                            }</text>))
                    .Format("{0:dd/MM/yyyy HH:mm}").HtmlAttributes(new { style = "text-align:center;" });
                    columns.Bound(p => p.DealCode).Title(WebModels.WebResources.DealCode).HtmlAttributes(new { style = "text-align:center;" });
                    columns.Bound(p => p.Note).Title(WebModels.WebResources.Information);
                    columns.Bound(p => p.CustomerName).Title(WebModels.WebResources.CustomerID);
                    columns.Bound(p => p.Money).Title(WebModels.WebResources.MoneyDebt).Format("{0:N0}đ");
                    columns.Bound(p => p.StationName).Title(WebModels.WebResources.Shop);
                    columns.Command(command =>
                    {
                        command.Custom(Resources.Common.Edit).Click("edit_handler");
                        command.Destroy();

                    }).HtmlAttributes(new { style = "text-align:center;" }).Title("Hành động").Width(155);
                })
                .Pageable()
                .Selectable(select => select.Mode(GridSelectionMode.Multiple))
                .Sortable()
                .Filterable()
                 .Editable(ed => ed.DisplayDeleteConfirmation("Bạn có chắc chắn xoá mục này?"))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Sort(sort => sort.Add("Date").Descending())
                    .Batch(true)
                    .ServerOperation(false)
                    .Events(events => events.Error("error_handler"))
                    .Model(model => { model.Id(p => p.ID); })
                    .Read(read => read.Action("DebtManage_Read", "DebtManage"))
                    .Destroy(destroy => destroy.Action("DebtManage_Destroy", "DebtManage"))
                    )
                     .Events(events => events.Change("change_handler").DataBinding("binding_handler"))
                        )
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<script>
    $(document).ready(function () {
        $("#btnsubmit").click(function (e) {
            e.preventDefault();
            var dataSource = $("#grid").data("kendoGrid").dataSource;
            var filters = dataSource.filter();
            var allData = dataSource.data();
            var query = new kendo.data.Query(allData);
            var grid = query.filter(filters).data;
            var models = [];
            for (var i = 0; i < grid.length; i++) {
                var dataItem = grid[i];
                var model = {};
                model.Date = dataItem.Date;
                model.DealCode = dataItem.DealCode;
                model.Note = dataItem.Note;
                model.CustomerName = dataItem.CustomerName;
                model.Money = dataItem.Money;
                model.StationName = dataItem.StationName;

                models.push(model);
            }
            var dataString = JSON.stringify(models);
            var dataReplace = dataString.replace('"', "?");
            $("input[name='DataExport']").val(dataReplace);

            setTimeout(function () {
                $("#general").submit();
            }, 100);
        });
    });
</script>

<style>
    .k-webkit {
        overflow: auto !important;
    }
    #btnsubmit {
        outline: none;
        background-color: #339933;
        display: block;
        font-size: 16px;
        min-width: 26px;
        color: #fff;
        text-decoration: none;
        position: relative;
        border-radius: 25px;
        text-align: center;
        padding-right: 2px;
        padding: 0.3vw 2vw;
        line-height: 30px;
    }

    .actions > li {
        float: left;
        list-style: none;
        margin-right: 10px !important;
        padding: 0;
    }
</style>