@{
    ViewBag.Title = "Cho thuê";
}
@{
    WebContext db = new WebContext();
    var roles = Roles.GetRolesForUser();
    var userRoleIds = db.WebRoles.Where(x => roles.Contains(x.RoleName)).Select(y => y.RoleId).ToList();
    var roleWebModule = db.AccessWebModuleRoles.AsNoTracking().FirstOrDefault(x => userRoleIds.Contains(x.RoleId) && x.WebModule.URL == "/admin/Product");

}

<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    function edit_success() {
        top.$("#window").data("kendoWindow").close();
        top.$("#grid").data("kendoGrid").dataSource.read();
    }
    var rowselected = [];
    function change_handler(e) {
        rowselected = [];
        var len = this.select().length;
        for (i = 0; i < len; i++) {
            rowselected.push(this.dataItem(this.select()[i]).ID);
        }
    }
    function binding_handler(e) {
        rowselected = [];
    }
    function changepassword_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/Product/changepassword/?userName=" + dataItem.UserName);
    }
    function delete_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/Rent/delete/" + dataItem.ID);
    }

    function edit_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/Rent/edit/" + dataItem.ID);
    }

    $(document).ready(function () {
        $("#btnadd").click(function () {
            opendlg("/admin/Rent/add");
        });
        $("#btnedit").click(function () {
            if (rowselected.length > 0) {
                opendlg("/admin/Rent/edit/" + rowselected[0]);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });
        $("#btndelete").click(function () {
            if (rowselected.length > 0) {
                opendlg("/admin/Rent/deletes/" + rowselected);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });
    });
</script>

<div id="main">
    <div id="left"></div>
    @if (roleWebModule != null && roleWebModule.View.HasValue && !roleWebModule.View.Value)
    {
        @Html.Action("Denied", "Account", new { area = "admin" })
    }
    @if (roleWebModule != null && roleWebModule.View.HasValue && roleWebModule.View.Value)
    {
        <div class="container-fluid">
            <div class="page-header">
                <div class="pull-left">
                    <div class="breadcrumbs">
                        <h1>Cho thuê</h1>
                    </div>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12">
                    <div class="box">
                        <div class="box-content nopadding">
                            @(Html.Kendo().Grid<ProductViewModel>()
                    .Name("grid")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.ProductName).Title("Tên máy");
                        columns.Bound(p => p.Price).Format("{0:N0}+ đ/ngày").Title("Đơn giá");
                        columns.Bound(p => p.Position).Title("Vị trí").HtmlAttributes(new { style = "text-align:center;" });
                        columns.Bound(p => p.Number).Title("Số lượng");
                        columns.Bound(p => p.Rest).Title("Số lượng còn lại");
                        columns.Command(command =>
                        {
                            if (roleWebModule != null && roleWebModule.Edit.HasValue && roleWebModule.Edit.Value)
                            {
                                command.Custom("Cho thuê").Click("edit_handler");
                            }
                        }).HtmlAttributes(new { style = "text-align:center;" }).Title("Hành động").Width(155);
                    })
                            .Pageable()
                            .Selectable(select => select.Mode(GridSelectionMode.Multiple))
                            .Sortable()
                            .Filterable()
                            .Editable(ed => ed.DisplayDeleteConfirmation("Bạn có chắc chắn xoá mục này?"))
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .Batch(true)
                                .Events(events => events.Error("error_handler"))
                                .Model(model =>
                                {
                                    model.Id(p => p.ID);
                                    model.Field(p => p.ID).Editable(false);
                                })
                                .PageSize(10)
                                .Read(read => read.Action("Product_Read", "Product"))
                                .Destroy(destroy => destroy.Action("Product_Destroy", "Product"))
                             )
                              .Events(events => events.Change("change_handler").DataBinding("binding_handler"))
                            )
                        </div>
                    </div>
                </div>
            </div>


        </div>
    }
</div>
<style>
    .k-webkit {
        overflow: auto !important;
    }
</style>