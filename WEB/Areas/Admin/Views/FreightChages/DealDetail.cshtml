@model IEnumerable<DealDetailViewModels>
<div>
    <div id="dealEdit"></div>
    <div id="windowdelete"></div>
    <script type="text/x-kendo-template" id="windowTemplate">
        <p> Xoá Chiết khấu : <strong>#= DiscountAmount #</strong> ? </p>
        <p> Cước : #= FreightCharge #</p>
        <p> Mô tả : #= Description #</p>
        <button class="k-button" id="yesButton">Xác nhận xoá</button>
        <button class="k-button" id="noButton"> Huỷ</button>
    </script>
    <script>
        function onDataBound() {
            var grid = $("#dealEdit").data("kendoGrid");
            if (grid.dataSource.data().length === 0) {
                var newRow = {};
                grid.dataSource.add(newRow);
            }
        }
        var rowselect;
        var windowTemplate = kendo.template($("#windowTemplate").html());
        var e = localStorage.parent;
        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/admin/FreightChages/Read_ByParent/" + e,
                    dataType: "json"
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                }
            },
            schema: {
                model: {
                    id: "",
                    fields: {
                        Description: {
                            type: "string",
                            validation: {
                                required: { message: "Vui lòng điền Mô tả chi tiết" }
                            }
                        },
                        DiscountAmount: {
                            type: "decimal",
                            validation: {
                                required: { message: "Vui lòng điền cước vận chuyển" }
                            }
                        },
                        FreightCharge: {
                            type: "decimal",
                            validation: {
                                required: { message: "Vui lòng điền mức chiết khấu" }
                            }
                        }
                    }
                }
            },
            pageSize: 5
        });

        var windowdelete = $("#windowdelete").kendoWindow({
            title: "Xác nhận xoá",
            visible: false,
            width: "400px",
            height: "200px",
        }).data("kendoWindow");

        var dealEdit = $("#dealEdit").kendoGrid({
            dataSource: dataSource,
            dataBound: onDataBound,
            toolbar: [
                { name: "create", text: "Thêm" }
            ],
            pageable: true,
            columns: [
                {  field: "Description",   title: "@WebModels.WebResources.Description" },
                { field: "DiscountAmount", title: "@WebModels.WebResources.DiscountAmount", editor: numberEdit, attributes: { "class": "k-number" }, template: "#= (data.DiscountAmount) ? kendo.format('{0:n0}đ', parseFloat(data.DiscountAmount)) : '' #" },
                { field: "FreightCharge", title: "@WebModels.WebResources.FreightPrice", editor: numberEdit, attributes: { "class": "k-number" }, template: "#= (data.FreightCharge) ? kendo.format('{0:n0}đ', parseFloat(data.FreightCharge)) : '' #" },
                {
                    command: [{
                        name: "Delete",
                        text: "Xoá",
                        click: function (e) {
                            e.preventDefault();
                            var tr = $(e.target).closest("tr");
                            var data = this.dataItem(tr);
                            if (data.DiscountAmount === undefined) {
                                data.DiscountAmount = 0;
                            }
                            if (data.FreightCharge === undefined) {
                                data.FreightCharge = 0;
                            }
                            if (data.Description === undefined) {
                                data.Description = "";
                            }
                            windowdelete.content(windowTemplate(data));
                            windowdelete.center().open();

                            $("#yesButton").click(function () {
                                dealEdit.dataSource.remove(data);
                                windowdelete.close();
                            })
                            $("#noButton").click(function () {
                                windowdelete.close();
                            })
                        }

                    }]
                    , width: "70px"
                }
            ],
            editable: true,
            edit: function (e) {
                $('.k-number').keypress(function (event) {
                    if (isNaN(String.fromCharCode(event.which))) {
                        event.preventDefault();
                    }
                });
            }
        }).data("kendoGrid");
        // decimal edit input
        function decimalEditor(container, options) {
            $('<input name="' + options.field + '"/>')
                .appendTo(container)
                .kendoNumericTextBox({
                    decimals: 2,
                    min: 0,
                    max: 9999999,
                })
        };
        // decimal edit input
        function numberEdit(container, options) {
            $('<input name="' + options.field + '"/>')
                .appendTo(container)
                .kendoNumericTextBox({
                    decimals: 0,
                    min: 0,
                    max: 9999999,
                })
        };
    </script>
</div>
<style>
    .k-webkit {
        overflow-y: auto !important;
    }
</style>
