@model IEnumerable<InvoiceManageDetailViewModel>
@{
    var userData = WEB.WebHelpers.UserInfoHelper.GetUserData();
}

<div>
    <div class="title-importdetail">
        <h2>Chi tiết quản lý hoá đơn @ViewBag.InvoiceCode</h2>
    </div>
    <div id="DetailView"></div>
    <div id="windowdelete"></div>
    <script type="text/x-kendo-template" id="windowTemplate">
        <p> Xoá hàng hoá : <strong>#= ProductDisplayName #</strong> ? </p>
        <p> Số lượng : #= SaleAmount #</p>
        <p> Số tiền : #= Money #</p>
        <button class="k-button" id="yesButton">Xác nhận xoá</button>
        <button class="k-button" id="noButton"> Huỷ</button>
    </script>
    <script>
        var selectedProductName = "";
        function callEditFunction(name, string) {
            var grid = $("#DetailView").data("kendoGrid");
            grid.bind("edit", function (e) {
                e.model.set(string + "DisplayName", name);
            });
        };
        function onDataBound() {
            var grid = $("#DetailView").data("kendoGrid");
            var stationID = $("#StationID").val() && $("#StationID").val() !== '' ? $("#StationID").val() : $("#ComboboxStation").data('kendoComboBox').value();
            var stationName = $("#StationName").val() && $("#StationName").val() !== '' ? $("#StationName").val() : $("#ComboboxStation").data('kendoComboBox').text();

            if (grid.dataSource.data().length === 0) {
                var newRow = { StationID: stationID, ProductDisplayName: ""};
                grid.dataSource.add(newRow);
            } else {
                for (var i = 0; i < grid.dataSource.data().length; i++) {
                    var item = grid.dataSource.data()[i];
                    if (!item.StationID || item.StationID === '') {
                        item.set("StationID", stationID);
                        item.set("StationDisplayName", stationName);
                    }
                }
            }
        }

        var rowselect;
        var windowTemplate = kendo.template($("#windowTemplate").html());
        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/admin/InvoiceManage/_InvoiceManageDetail/" + "@ViewBag.parentID",
                    dataType: "json"
                }
            },
            schema: {
                model: {
                    id: "ID",
                    fields: {
                        ProductID: {
                            type: "int",
                            validation: {
                                required: { message: "Vui lòng chọn hàng hoá" }
                            }
                        },
                        ProductName: {
                            type: "string"
                        },
                        ProductCode: {
                            type: "string",
                        },
                        SaleAmount: {
                            type: "decimal",
                            validation: {
                                required: { message: "Vui lòng điền số lượng"}
                            }
                        },
                        Price: {
                            type: "decimal",
                            validation: {
                                required: { message: "Vui lòng điền giá" }
                            }
                        },
                        Money: { type: "decimal" },
                        ProductDisplayName: { type: "string" }
                    }
                }
            },
            batch: true,
            pageSize: 10
        });
        var dataProduct = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/admin/Product/GetProduct",
                    dataType: "json"
                }
            },
            schema: {
                model: {
                    id: "ID",
                    fields: {
                        ID: { type: "int" },
                        ProductName: { type: "string" },
                        DisplayName: { type: "string" }
                    }
                }
            },
            serverFiltering: true
        });

        var windowdelete = $("#windowdelete").kendoWindow({
            title: "Xác nhận xoá",
            visible: false,
            width: "400px",
            height: "200px",
        }).data("kendoWindow");

        var columns = [
            {
                field: "ProductID", editor: ProductComboboxEditor, template: "#=ProductDisplayName#", title: "Hàng hoá", attributes: { "id": "ProductCombobox" }
            },
            { field: "SaleAmount", title: "Số lượng", attributes: { "class": "inputnumberQuantity " }, editor: decimalEditor , template: "#= (data.SaleAmount) ? kendo.format('{0:n2} lít', parseFloat(data.SaleAmount)) : '' #" },
            {
                field: "Price", title: "Đơn giá", attributes: { "class": "inputprice" }, editor: decimalEditor, template: "#= (data.Price) ? kendo.format('{0:n2}đ', parseFloat(data.Price)) : '' #"
            },
            { field: "Money", title: "Thành tiền", attributes: { "class": "total " }, template: "#= (data.Money) ? kendo.format('{0:n2}đ', parseFloat(data.Money)) : '' #" },
            {
                command: [{
                    name: "Delete",
                    text: "Xoá",
                    click: function (e) {
                        e.preventDefault();
                        var tr = $(e.target).closest("tr");
                        var data = this.dataItem(tr);
                        if (data.SaleAmount === undefined) {
                            data.SaleAmount = 0;
                        }
                        if (data.Money === undefined) {
                            data.Money = 0;
                        }
                        console.log(data);
                        windowdelete.content(windowTemplate(data));
                        windowdelete.center().open();

                        $("#yesButton").click(function () {
                            DetailView.dataSource.remove(data);
                            windowdelete.close();
                        })
                        $("#noButton").click(function () {
                            windowdelete.close();
                        })
                    }

                }]
                , width: "70px"
            }
        ];

        var DetailView = $("#DetailView").kendoGrid({
            dataSource: dataSource,
            pageable: true,
            toolbar: [{ name: "create", text: "Thêm" }],
            columns: columns,
            editable: true,
            dataBound: onDataBound,
            edit: function (e) {
                $('[name="Money"]').attr("readonly", true);
                var model = e.model;
                e.model.bind("change", function (row) {
                    if (row.field === "SaleAmount" || row.field === "Price") {
                        var total = 0;
                        if (model.get("SaleAmount") == undefined || model.get("Price") == undefined) {
                            model.set("Money", total);
                        }
                        else {
                            total = model.get("SaleAmount") * model.get("Price");
                            model.set("Money", total);
                        }
                        calculateTotal();
                    }

                    if (row.field === "ProductID") {
                        var isProductValid = false;

                        var grid = $("#DetailView").data("kendoGrid");
                        var data = grid.dataSource.data();
                        var selectedProductId = model.get("ProductID");
                        if (typeof selectedProductId === "object" && selectedProductId != null) {
                            var selectedProductName = dataProduct.data().filter(x => x.ID === selectedProductId.ID)[0].ProductDisplayName;
                            isProductValid = true;
                        }
                        else if (typeof selectedProductId !== "object" && selectedProductId != "" && selectedProductId !== undefined) {
                            if (dataProduct.data().filter(x => x.ID === selectedProductId).length != 0) {
                                var selectedProductName = dataProduct.data().filter(x => x.ID === selectedProductId)[0].ProductDisplayName;
                                isProductValid = true;
                            } else {
                                selectedProductName = "";
                                model.set("ProductDisplayName", selectedProductName);
                                model.set("ProductID", '');
                            }
                        }

                        //check product distinctfo
                        let findDuplicates = arr => arr.filter((item, index) => item !== "" && arr.indexOf(item) != index);
                        var productIds = [];
                        for (var i = 0; i < data.length; i++) {
                            if (isNaN(data[i].ProductID)) {
                                if (data[i].ProductID && (data[i].ProductID).length != 0) {
                                    productIds.push(data[i].ProductID.ID);
                                }
                            } else if (!isNaN(data[i].ProductID)) {
                                productIds.push(data[i].ProductID);
                            }
                        }
                        if (findDuplicates(productIds).length > 0) {
                            alert("Hàng hoá này đã có trong đơn!!");
                            model.set("ProductID", currentProductID);
                            DetailView.refresh();
                            e.model.unbind("change");
                            return;
                        }
                        model.set("ProductDisplayName", selectedProductName);
                        if (isProductValid) {
                            e.model.unbind("change");
                        }    
                    }
                });

                 $(".total").find("input").keypress(function (event) {
                        event.preventDefault();
                        return false;
                 });
                $('.k-number').find("input").keypress(function (event) {
                    if (isNaN(String.fromCharCode(event.which))) {
                        event.preventDefault();
                    }
                });
            }
        }).data("kendoGrid");
        //set total
        function calculateTotal() {
            var grid = $("#DetailView").data("kendoGrid");
            var data = grid.dataSource.data();
            if (data.length !== 0) {
                var totalMoney = 0;
                var totalSaleAmount = 0;
                var tax = 0;
                var money = 0;
                for (var i = 0; i < data.length; i++) {
                    if (data[i].Money != undefined) {
                        money += parseFloat(data[i].Money);
                        tax += parseFloat(data[i].Money * 10 / 100);
                        totalMoney += parseFloat(data[i].Money * 10 / 100) + parseFloat(data[i].Money);
                    }
                    if (data[i].SaleAmount != undefined) {
                        totalSaleAmount += parseFloat(data[i].SaleAmount);
                    }
                }

                $('#TotalMoney').val(kendo.format('{0:n0}đ', parseFloat(totalMoney)));
                $('#TotalQuantity').val(kendo.format('{0:n2} lít', parseFloat(totalSaleAmount)));
                $('#Tax').val(kendo.format('{0:n0}đ', parseFloat(tax)));
                $('#Money').val(kendo.format('{0:n0}đ', parseFloat(money)));
            }
        }
        // decimal edit input
        function decimalEditor(container, options) {
            $('<input name="' + options.field + '"/>')
                .appendTo(container)
                .kendoNumericTextBox({
                    decimals: 2,
                    min: 0,
                    max: 9999999,
                })
        };
        // decimal edit input
        function numberEdit(container, options) {
            $('<input name="' + options.field + '"/>')
                .appendTo(container)
                .kendoNumericTextBox({
                    decimals: 0,
                    min: 0,
                    max: 9999999,
                })
        };

        function ProductComboboxEditor(container, options) {
            $('<input name="ProductID"  id="ComboboxProduct" required validationMessage="Vui lòng chọn hàng hóa">')
                .appendTo(container)
                .kendoComboBox({
                    autoBind: true,
                    dataTextField: "ProductDisplayName",
                    dataValueField: "ID",
                    dataSource: dataProduct,
                    change: function (e) {
                        var val = this.text();
                        var data = dataProduct.data();
                        var checkvalue = 0;
                        for (var i = 0; i < data.length; i++) {
                            if (val === data[i].ProductDisplayName) {
                                checkvalue = 1;
                                selectedName = data[i].ProductDisplayName;
                                callEditFunction(selectedName, "Product");
                            }
                        }
                        if (checkvalue == 0) {
                            this.value("");
                            selectedName = "";
                        }
                    }
                });
        };
    </script>
</div>
<style>
    .k-webkit {
        overflow-y: auto !important;
    }
</style>