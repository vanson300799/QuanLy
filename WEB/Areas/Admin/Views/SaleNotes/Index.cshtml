@model SaleNotesViewModel
@{
    WebContext db = new WebContext();
    var roles = Roles.GetRolesForUser();
    var userRoleIds = db.WebRoles.Where(x => roles.Contains(x.RoleName)).Select(y => y.RoleId).ToList();
    var roleWebModule = db.AccessWebModuleRoles.AsNoTracking().FirstOrDefault(x => userRoleIds.Contains(x.RoleId) && x.WebModule.URL == "/admin/SaleNotes");
    var checkEmployee = WEB.WebHelpers.UserInfoHelper.GetUserData().StationID.HasValue;
}
@{
    ViewBag.Title = "Phân tích giá";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutReport.cshtml";
}

<div id="general-import">
    <div class="container-fluid">
        @*<div class="page-header">
                <div class="pull-left">
                    <div class="breadcrumbs">
                        <h1>Sổ bán hàng</h1>
                    </div>
                </div>
                <div class="pull-right">

                </div>
            </div>*@
    </div>
    @using (Html.BeginForm("ExportExcel", "SaleNotes", FormMethod.Post, new { @id = "general", enctype = "multipart/form-data", @class = "form-horizontal fix" }))
    {
        if (checkEmployee)
        {
            @Html.HiddenFor(x => x.StationID)
        }
        @Html.HiddenFor(x=>x.StartTime)
        @Html.HiddenFor(x=>x.EndTime)
        <div class="container-fluid">
            <div class="messageValidation">
                @Html.ValidationSummary()
            </div>
            <div class="row row-quanlyxe">
                <div class="block-row">
                    <div class="flex">
                        <div class="manage-car-search row-plan-drive">
                            <p class="text-description-report text-description-report-time">Thời gian chạy báo cáo:</p>
                            <form action="">
                                @Html.TextBoxFor(m => m.Time)
                            </form>
                        </div>
                        <div>
                            <p class="text-description-report">Hàng hoá:</p>
                            @(Html.Kendo().ComboBoxFor(m => m.ProductID)
                    .DataTextField("ProductDisplayName")
                    .DataValueField("ID")
                    .Placeholder("Chọn hàng hóa...")
                    .Suggest(true)
                    .Filter("contains")
                    .Name("ProductID")
                    .HtmlAttributes(new { id = "ComboboxProduct" })
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                        read.Action("GetProduct", "Product");
                        })
                        .ServerFiltering(true);
                    })
                    .Events(e => e.DataBound("onDataBoundCombobox").Change("onChangeCombobox"))
                )
                        </div>
                        <div>
                            @if (checkEmployee)
                            {
                                @Html.HiddenFor(m => m.StationName, new { @class = "input-block-level none-edit", @readonly = "readonly" })
                            }
                            else
                            {
                                <p class="text-description-report">Cửa hàng:</p>
                                @(Html.Kendo().ComboBoxFor(m => m.StationID)
                            .DataTextField("StationDisplayName")
                            .DataValueField("ID")
                            .Placeholder("Chọn cửa hàng ...")
                            .Suggest(true)
                            .Filter("contains")
                            .Name("StationID")
                            .HtmlAttributes(new { id = "ComboboxStation" })
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("GetStation", "Station");
                                })
                                .ServerFiltering(true);
                            })
                            .Events(e => e.DataBound("onDataBoundCombobox").Change("onChangeCombobox"))
                         )
                            }
                        </div>
                    </div>
                    <div class="flex">
                        <div>
                            <p class="text-hide-custom">Xuất</p>
                            <div class="btn-output btn-plan-drive detail-report-button" id="export">
                                <p class="text-14-500 padding-text-plan-drive detail-export">Chạy Báo Cáo</p>
                            </div>
                        </div>
                        <div>
                            <p class="text-hide-custom">Tải</p>
                            <div class="btn-download btn-plan-drive detail-report-button" id="download">
                                <input type="submit" value="Tải file excel" class="text-14-500 padding-text-plan-drive detail-download" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }


    <div class="container-fluid" id="dealDetail">
        <div class="row-fluid">
            <div class="span12">
                <div class="box">
                    <div class="box-content nopadding">
                        <div class="report-title">
                            <h1>@ViewBag.title</h1>
                            <h2 id="report-time"></h2>
                            <h2 id="report-station"></h2>
                            <h2 id="report-product"></h2>
                        </div>
                        <div id="detail-report"></div>
                        <script>
                            var rowselected;
                            var columns = [
                                {
                                    field: "DateTime", title: "Ngày tháng", format: "{0: dd-MM-yyyy }", width: "120px", filterable: {
                                        ui: function (element) {
                                            element.kendoDatePicker({
                                                culture: 'vi-VN',
                                                format: "{0: dd-MM-yyyy }"
                                            });
                                        }
                                    }
                                },
                                { field: "Customer", title: "Khách hàng", footerTemplate: "Tổng", width: '150px' },
                                { field: "Vehicle", title: "Phương tiện", width: '150px' },
                                { field: "SaleNumber", title: "SL bán", template: "#= (data.SaleNumber) ? kendo.format('{0:n2}', parseFloat(data.SaleNumber)) : '' #", aggregates: ["sum"], footerTemplate: "#= (sum) ? kendo.format('{0:n2} Lít', parseFloat(sum)) : '' #", width: '150px' },
                                { field: "UnitPrice", title: "Giá bán", template: "#= (data.UnitPrice) ? kendo.format('{0:n0} đ', parseFloat(data.UnitPrice)) : '' #", width: '150px' },
                                { field: "ListedPrice ", title: "Giá niêm yết", template: "#= (data.ListedPrice) ? kendo.format('{0:n2} đ', parseFloat(data.ListedPrice)) : '' #", width: '150px' },
                                { field: "ListedPriceBeforeTax ", title: "Giá niêm yết trước thuế", template: "#= (data.ListedPriceBeforeTax) ? kendo.format('{0:n2} đ', parseFloat(data.ListedPriceBeforeTax)) : '' #", width: '150px', width: '150px' },
                                { field: "CostPriceBeforeTax ", title: "Giá vốn trước thuế", template: "#= (data.CostPriceBeforeTax) ? kendo.format('{0:n2} đ', parseFloat(data.CostPriceBeforeTax)) : '' #", width: '150px' },
                                { field: "SupplierDiscount", title: "CK của nhà CC", template: "#= (data.SupplierDiscount) ? kendo.format('{0:n2} đ', parseFloat(data.SupplierDiscount)) : '' #", width: '150px', aggregates: ["sum"], footerTemplate: "#= (sum) ? kendo.format('{0:n2} đ', parseFloat(sum)) : '' #" },
                                { field: "Freight", title: "Cước", template: "#= (data.Freight ) ? kendo.format('{0:n2} đ', parseFloat(data.Freight)) : '' #", aggregates: ["sum"], footerTemplate: "#= (sum) ? kendo.format('{0:n2} đ', parseFloat(sum)) : '' #", width: '150px' },
                                { field: "PaidPrice", title: "Đã TT", template: "#= (data.PaidPrice ) ? kendo.format('{0:n2} đ', parseFloat(data.PaidPrice)) : '' #", aggregates: ["sum"], footerTemplate: "#= (sum) ? kendo.format('{0:n2} đ', parseFloat(sum)) : '' #", width: '150px' },
                                { field: "CompanyDebtPrice", title: "Nợ công ty", template: "#= (data.CompanyDebtPrice) ? kendo.format('{0:n2} đ', parseFloat(data.CompanyDebtPrice)) : '' #", aggregates: ["sum"], footerTemplate: "#= (sum) ? kendo.format('{0:n2} đ', parseFloat(sum)) : '' #", width: '150px' },
                                { field: "BookDebtPrice", title: "Nợ sổ", template: "#= (data.BookDebtPrice) ? kendo.format('{0:n2} đ', parseFloat(data.BookDebtPrice)) : '' #", aggregates: ["sum"], footerTemplate: "#= (sum) ? kendo.format('{0:n2} đ', parseFloat(sum)) : '' #", width: '150px' },
                                { field: "Discount", title: "Chiết khấu", template: "#= (data.Discount) ? kendo.format('{0:n2} đ', parseFloat(data.Discount)) : '' #", aggregates: ["sum"], footerTemplate: "#= (sum) ? kendo.format('{0:n2} đ', parseFloat(sum)) : '' #", width: '150px' },
                                { field: "ProductDisplayName", title: "Hàng hóa", width: '150px' }
                            ];
                            function loaddata(model) {
                                if ($("#detail-report").data("kendoGrid") != null) { $('#detail-report').html(''); delete $("#detail-report").data("kendoGrid"); }
                                $("#detail-report").kendoGrid({
                                    dataSource: {
                                        transport: {
                                            read: {
                                                url: "/admin/SaleNotes/SaleNotesRead/",
                                                dataType: "json",
                                                data: model
                                            }
                                        },
                                        aggregate: [
                                            { field: "SaleNumber", aggregate: "sum" },
                                            { field: "Freight", aggregate: "sum" },
                                            { field: "Discount", aggregate: "sum" },
                                            { field: "PaidPrice", aggregate: "sum" },
                                            { field: "CompanyDebtPrice", aggregate: "sum" },
                                            { field: "BookDebtPrice", aggregate: "sum" },
                                            { field: "SupplierDiscount", aggregate: "sum" },
                                        ],
                                        emptyMsg: 'This grid is empty',
                                        schema: {
                                            model: {
                                                ID: "ID",
                                                fields: {
                                                    DateTime: { type: "date" },
                                                    Customer: { type: "string" },
                                                    Vehicle: { type: "string" },
                                                    SaleNumber: { type: "number" },
                                                    UnitPrice: { type: "number" },
                                                    PaidPrice: { type: "number" },
                                                    CompanyDebtPrice: { type: "number" },
                                                    Discount: { type: "number" },
                                                    ListedPrice: { type: "number" },
                                                    ListedPriceBeforeTax: { type: "number" },
                                                    CostPriceBeforeTax: { type: "number" },
                                                    CarrierTransfer: { type: "number" },
                                                    Freight: { type: "number" },
                                                    BookDebtPrice: { type: "number" }
                                                }
                                            }
                                        }
                                    },
                                    scrollable: true,
                                    columns: columns,
                                    filterable: true,
                                    dataBound: function () {
                                        if (this.dataSource.view().length == 0) {
                                            //insert empty row
                                            var colspan = this.thead.find("th").length;
                                            var emptyRow = "<tr><td colspan='" + colspan + "'></td></tr>";
                                            this.tbody.html(emptyRow);

                                            //workarounds for IE lt 9
                                            this.table.width(1000);
                                        }
                                    },
                                    dataBinding: function () {
                                        rowselected = new Array();
                                    },
                                    change: function () {
                                        rowselected = [];
                                        var len = this.select().length;
                                        for (i = 0; i < len; i++) {
                                            rowselected.push(this.dataItem(this.select()[i]).ID);
                                        }
                                    }
                                });
                            }
                        </script>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $("#export").click(function () {
            var modelReport = {};
                function checkHasStation() {
                    if ('@checkEmployee' === 'True') {
                        if (!$("#StationID").valid()) {
                            return true;
                        }
                        else {
                            modelReport.StationID = $("#StationID").val();
                            return false;
                        }
                    }
                    else {
                        if (!$("#ComboboxStation").valid()) {
                            return true;
                        }
                        else {
                            modelReport.StationID = $("#ComboboxStation").data('kendoComboBox').value()
                            return false;
                        }
                    }
            }
            checkHasStation();
            var timeString = $("#Time").val();
            var timeArray = timeString.split(" Đến ");
            var startTime = timeArray[0];
            var endTime = timeArray[1];
            modelReport.startTime = startTime;
            modelReport.endTime = endTime;
            modelReport.ProductID = $("#ComboboxProduct").val();
            $("#report-time").html(timeString);if ('@checkEmployee' === 'True') {
                $("#report-station").html("Cửa hàng: " + $("input[name='StationName']").val());
                if (modelReport.ProductID == null || modelReport.ProductID == "") {
                    alert("Vui lòng chọn cửa hàng!");
                } else {
                    loaddata(modelReport);
                    $("#report-product").html("Hàng Hoá: " + $("#ComboboxProduct").data('kendoComboBox').text());
                };
            } else {
                if ((modelReport.ProductID == null || modelReport.ProductID == "") && (modelReport.StationID == null || modelReport.StationID == "")) {
                    alert("Vui lòng chọn cửa hàng và hàng hoá!")
                } else if ((modelReport.ProductID == null || modelReport.ProductID == "") && (modelReport.StationID != null || modelReport.StationID != "")) {
                    alert("Vui lòng chọn hàng hoá!");
                } else if ((modelReport.ProductID != null || modelReport.ProductID != "") && (modelReport.StationID == null || modelReport.StationID == "")) {
                    alert("Vui lòng chọn cửa hàng!");
                } else {
                    loaddata(modelReport);
                    $("#report-product").html("Hàng Hoá: " + $("#ComboboxProduct").data('kendoComboBox').text());
                    $("#report-station").html("Cửa hàng: " + $("#ComboboxStation").data('kendoComboBox').text());
                };
            };
        });
        $("#download").click(function (e) {
            e.preventDefault();
            var timeString = $("#Time").val();
            var timeArray = timeString.split(" Đến ");
            var startTime = timeArray[0];
            var endTime = timeArray[1];
            $("input[name='StartTime']").val(startTime);
            $("input[name='EndTime']").val(endTime);
            if ($("#ComboboxStation").val() == "") {
                alert("Vui lòng chọn cửa hàng!");
            }
            debugger
            setTimeout(function () {
                $("#general").submit();
            }, 100);
        });
    });


</script>
